{"version":3,"file":"bf95179815a946c5f6d3e0bfbf9205033d22e31a-433bd8c0a16f5f798b5c.js","mappings":"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","sources":["webpack://hongsen/./src/components/Button.js","webpack://hongsen/./src/components/Header.js","webpack://hongsen/./node_modules/@emotion/memoize/dist/memoize.browser.esm.js","webpack://hongsen/./node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js","webpack://hongsen/./src/utils/utils.js","webpack://hongsen/./node_modules/use-resize-observer/dist/bundle.esm.js","webpack://hongsen/./src/utils/masonry.js","webpack://hongsen/./src/components/Gallery.js","webpack://hongsen/./src/styles/export.module.scss"],"sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport '../styles/components/button.scss';\r\n\r\nexport const Button = ({ buttonText, path }) => {\r\n    return (\r\n        <Link to={path} className=\"button-link\">\r\n            <div className=\"button\">\r\n                {buttonText}\r\n            </div>\r\n        </Link>\r\n    );\r\n};\r\n\r\nexport const BackToTopButton = () => {\r\n    const scrollUp = () => {\r\n        window.scrollTo({\r\n            top: 0,\r\n            behavior: \"smooth\",\r\n        })\r\n    };\r\n\r\n    return (\r\n        <button className=\"bttb\" aria-label=\"Back to top\" onClick={scrollUp}>\r\n            <div className=\"bttb-container\">\r\n                <span className={`bttb-arrow`}/>\r\n            </div>\r\n        </button>\r\n    );\r\n};\r\n\r\nexport const GalleryButtons = ({ renderButton = true, type }) => {\r\n    const wrapperClassName = renderButton ? \"button-wrapper\" : \"button-wrapper__single\";\r\n\r\n    // Optionally render \"Back to Collection\" button that don't have collections like the\r\n    // home and portrait pages. Check if the \"title\" exists in the md file.\r\n    return (\r\n        <div className={wrapperClassName}>\r\n            {renderButton && <Button buttonText={\"Back to Collection\"} path={`/${type}`} />}\r\n            <BackToTopButton />\r\n        </div>\r\n    );\r\n};\r\n\r\nButton.propTypes = {\r\n    buttonText: PropTypes.string,\r\n    path: PropTypes.string,\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport '../styles/components/header.scss';\r\nimport { Link } from 'gatsby';\r\n\r\nconst Header = ({ title, subtitle, description, subAlbum}) => (\r\n        <div className=\"header-wrapper\">\r\n            <header className=\"header-title\">\r\n                <h1>{title}</h1>\r\n                <h3 className=\"header-subtitle\">{subtitle}</h3>\r\n            </header>\r\n            <div className=\"header-description\" dangerouslySetInnerHTML={{ __html: description }} />           \r\n            {\r\n                // Render sub-albums\r\n                subAlbum.length > 0 && (\r\n                    <div>\r\n                        <h4 className=\"header-subalbum\">Related Albums</h4>\r\n                        {subAlbum.map((album, idx) => {\r\n                            return (\r\n                                <Link\r\n                                    to={album.slug}\r\n                                    className=\"navigation-subalbum-link\"\r\n                                    activeClassName=\"navigation__active\"\r\n                                    key={idx}\r\n                                >\r\n                                    {album.title}\r\n                                </Link>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            }\r\n        </div>\r\n);\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    subtitle: PropTypes.string.isRequired,\r\n    description: PropTypes.string,\r\n};\r\n\r\nexport default Header;","function memoize(fn) {\n  var cache = {};\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar index = memoize(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\nexport default index;\n","/**\r\n * Get's the first image's image data in the list of images that is a horizontal image.\r\n * This image will be used for the metadata image tags when sharing on social media,\r\n * which generally displays in a horizontal format.\r\n *\r\n * @param {List[object]} images - list of objects that contain info about\r\n * each images' image src, height, and width. Used for metadata images\r\n * @returns object containing src, height, and width attributes\r\n */\r\nconst getMetaImage = (images) => {\r\n    const firstHorizontalImage = images.find(({ image }) => {\r\n        const { height, width } = image.childImageSharp.original\r\n        return width >= height;\r\n    });\r\n    return (\r\n        firstHorizontalImage && firstHorizontalImage.image.childImageSharp.original\r\n    );\r\n};\r\n\r\nexport { getMetaImage };","import { useRef, useEffect, useCallback, useState, useMemo } from 'react';\n\n// This could've been more streamlined with internal state instead of abusing\n// refs to such extent, but then composing hooks and components could not opt out of unnecessary renders.\nfunction useResolvedElement(subscriber, refOrElement) {\n  var lastReportRef = useRef(null);\n  var refOrElementRef = useRef(null);\n  refOrElementRef.current = refOrElement;\n  var cbElementRef = useRef(null); // Calling re-evaluation after each render without using a dep array,\n  // as the ref object's current value could've changed since the last render.\n\n  useEffect(function () {\n    evaluateSubscription();\n  });\n  var evaluateSubscription = useCallback(function () {\n    var cbElement = cbElementRef.current;\n    var refOrElement = refOrElementRef.current; // Ugly ternary. But smaller than an if-else block.\n\n    var element = cbElement ? cbElement : refOrElement ? refOrElement instanceof Element ? refOrElement : refOrElement.current : null;\n\n    if (lastReportRef.current && lastReportRef.current.element === element && lastReportRef.current.subscriber === subscriber) {\n      return;\n    }\n\n    if (lastReportRef.current && lastReportRef.current.cleanup) {\n      lastReportRef.current.cleanup();\n    }\n\n    lastReportRef.current = {\n      element: element,\n      subscriber: subscriber,\n      // Only calling the subscriber, if there's an actual element to report.\n      // Setting cleanup to undefined unless a subscriber returns one, as an existing cleanup function would've been just called.\n      cleanup: element ? subscriber(element) : undefined\n    };\n  }, [subscriber]); // making sure we call the cleanup function on unmount\n\n  useEffect(function () {\n    return function () {\n      if (lastReportRef.current && lastReportRef.current.cleanup) {\n        lastReportRef.current.cleanup();\n        lastReportRef.current = null;\n      }\n    };\n  }, []);\n  return useCallback(function (element) {\n    cbElementRef.current = element;\n    evaluateSubscription();\n  }, [evaluateSubscription]);\n}\n\n// We're only using the first element of the size sequences, until future versions of the spec solidify on how\n// exactly it'll be used for fragments in multi-column scenarios:\n// From the spec:\n// > The box size properties are exposed as FrozenArray in order to support elements that have multiple fragments,\n// > which occur in multi-column scenarios. However the current definitions of content rect and border box do not\n// > mention how those boxes are affected by multi-column layout. In this spec, there will only be a single\n// > ResizeObserverSize returned in the FrozenArray, which will correspond to the dimensions of the first column.\n// > A future version of this spec will extend the returned FrozenArray to contain the per-fragment size information.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-entry-interface)\n//\n// Also, testing these new box options revealed that in both Chrome and FF everything is returned in the callback,\n// regardless of the \"box\" option.\n// The spec states the following on this:\n// > This does not have any impact on which box dimensions are returned to the defined callback when the event\n// > is fired, it solely defines which box the author wishes to observe layout changes on.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// I'm not exactly clear on what this means, especially when you consider a later section stating the following:\n// > This section is non-normative. An author may desire to observe more than one CSS box.\n// > In this case, author will need to use multiple ResizeObservers.\n// (https://drafts.csswg.org/resize-observer/#resize-observer-interface)\n// Which is clearly not how current browser implementations behave, and seems to contradict the previous quote.\n// For this reason I decided to only return the requested size,\n// even though it seems we have access to results for all box types.\n// This also means that we get to keep the current api, being able to return a simple { width, height } pair,\n// regardless of box option.\nfunction extractSize(entry, boxProp, sizeType) {\n  if (!entry[boxProp]) {\n    if (boxProp === \"contentBoxSize\") {\n      // The dimensions in `contentBoxSize` and `contentRect` are equivalent according to the spec.\n      // See the 6th step in the description for the RO algorithm:\n      // https://drafts.csswg.org/resize-observer/#create-and-populate-resizeobserverentry-h\n      // > Set this.contentRect to logical this.contentBoxSize given target and observedBox of \"content-box\".\n      // In real browser implementations of course these objects differ, but the width/height values should be equivalent.\n      return entry.contentRect[sizeType === \"inlineSize\" ? \"width\" : \"height\"];\n    }\n\n    return undefined;\n  } // A couple bytes smaller than calling Array.isArray() and just as effective here.\n\n\n  return entry[boxProp][0] ? entry[boxProp][0][sizeType] : // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's current\n  // behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.\n  // @ts-ignore\n  entry[boxProp][sizeType];\n}\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver.\n  var onResize = opts.onResize;\n  var onResizeRef = useRef(undefined);\n  onResizeRef.current = onResize;\n  var round = opts.round || Math.round; // Using a single instance throughout the hook's lifetime\n\n  var resizeObserverRef = useRef();\n\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after\n  // the component unmounted.\n\n\n  var didUnmount = useRef(false);\n  useEffect(function () {\n    didUnmount.current = false;\n    return function () {\n      didUnmount.current = true;\n    };\n  }, []); // Using a ref to track the previous width / height to avoid unnecessary renders.\n\n  var previous = useRef({\n    width: undefined,\n    height: undefined\n  }); // This block is kinda like a useEffect, only it's called whenever a new\n  // element could be resolved based on the ref option. It also has a cleanup\n  // function.\n\n  var refCallback = useResolvedElement(useCallback(function (element) {\n    // We only use a single Resize Observer instance, and we're instantiating it on demand, only once there's something to observe.\n    // This instance is also recreated when the `box` option changes, so that a new observation is fired if there was a previously observed element with a different box option.\n    if (!resizeObserverRef.current || resizeObserverRef.current.box !== opts.box || resizeObserverRef.current.round !== round) {\n      resizeObserverRef.current = {\n        box: opts.box,\n        round: round,\n        instance: new ResizeObserver(function (entries) {\n          var entry = entries[0];\n          var boxProp = opts.box === \"border-box\" ? \"borderBoxSize\" : opts.box === \"device-pixel-content-box\" ? \"devicePixelContentBoxSize\" : \"contentBoxSize\";\n          var reportedWidth = extractSize(entry, boxProp, \"inlineSize\");\n          var reportedHeight = extractSize(entry, boxProp, \"blockSize\");\n          var newWidth = reportedWidth ? round(reportedWidth) : undefined;\n          var newHeight = reportedHeight ? round(reportedHeight) : undefined;\n\n          if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n            var newSize = {\n              width: newWidth,\n              height: newHeight\n            };\n            previous.current.width = newWidth;\n            previous.current.height = newHeight;\n\n            if (onResizeRef.current) {\n              onResizeRef.current(newSize);\n            } else {\n              if (!didUnmount.current) {\n                setSize(newSize);\n              }\n            }\n          }\n        })\n      };\n    }\n\n    resizeObserverRef.current.instance.observe(element, {\n      box: opts.box\n    });\n    return function () {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.instance.unobserve(element);\n      }\n    };\n  }, [opts.box, round]), opts.ref);\n  return useMemo(function () {\n    return {\n      ref: refCallback,\n      width: size.width,\n      height: size.height\n    };\n  }, [refCallback, size.width, size.height]);\n}\n\nexport { useResizeObserver as default };\n","import { getImage } from 'gatsby-plugin-image';\r\nimport { mobileBreakpoint, desktopBreakpoint } from '../styles/export.module.scss';\r\n\r\n/**\r\n * Calculates the aspect ratios of images.\r\n * @param {*} images - List of GatsbyImageData images.\r\n * @returns list of aspect ratios.\r\n */\r\nconst getAspectRatio = (images) => {\r\n    const aspectRatios = images.map(({ image }) => {\r\n        const height = getImage(image).height;\r\n        const width = getImage(image).width;\r\n        const resolution = 1000;\r\n        return Math.ceil(height / width * resolution) / resolution;\r\n    });\r\n\r\n    // aspectRatio < 1 === horizontal image\r\n    return aspectRatios;\r\n};\r\n\r\n/**\r\n * Calculates the number of gallery columns based user screen size.\r\n * @param {int} containerWidth - Size of the gallery container.\r\n * @param {int} defaultColumns - Default number of columns.\r\n * @returns number of columns.\r\n */\r\nconst getBreakPoint = (containerWidth, defaultColumns) => {\r\n    if (defaultColumns === 1) {\r\n        return defaultColumns;\r\n    }\r\n    else if (containerWidth < mobileBreakpoint) {\r\n        return 1;\r\n    }\r\n    else if (containerWidth < desktopBreakpoint) {\r\n        return 2;\r\n    }\r\n    else {\r\n        return defaultColumns;\r\n    }\r\n};\r\n\r\n/**\r\n * Calculates the contentHeight of each image based on the contentWidth and aspect ratio.\r\n * @param {*} images - List of GatsbyImageData images.\r\n * @param {int} contentWidth - Image width within gallery.\r\n * @returns list of image height.\r\n */\r\nconst getContentHeight = (images, contentWidth) => {\r\n    const aspectRatios = getAspectRatio(images);\r\n    const contentHeight = aspectRatios.map((aspectRatio) => Math.floor(aspectRatio * contentWidth));\r\n    return contentHeight;\r\n}\r\n\r\n/**\r\n * Calculates the contentWidth for a fixed-width gallery layout. Take the floor of the result to not exceed \r\n * containerWidth and avoid float values. \r\n * Note: The gutter size is adjusted so that the images span the entire container width.\r\n * @param {*} containerWidth - Size of the gallery container.\r\n * @param {int} numColumns - Number of columns in gallery layout.\r\n * @param {int} defaultGutter - Default gutter size between images.\r\n * @returns content width and adjusted gutter size.\r\n */\r\nconst getContentWidth = (containerWidth, numColumns, defaultGutter) => {\r\n    const numerator = (containerWidth - (numColumns - 1) * defaultGutter)\r\n    const contentWidth = Math.floor(numerator / numColumns);\r\n    const gutter = numColumns === 1 ? defaultGutter : defaultGutter + ((numerator % numColumns) / (numColumns - 1));\r\n    return { contentWidth, gutter };\r\n};\r\n\r\n/**\r\n * Calculates the coodinates of where each image should be placed in the gallery.\r\n * @param {*} contentHeight - List of image heights.\r\n * @param {int} columnWidth - Column width of gallery (fixed).\r\n * @param {int} gutter - Spacing between images.\r\n * @param {int} numColumns - Number of columns in gallery layout.\r\n * @returns list of content coordinates and the max content-container height.\r\n */\r\nconst getLayoutPosition = (contentHeight, columnWidth, gutter, numColumns) => {\r\n    // Keep track of total height in each column\r\n    const columnYPositions = new Array(numColumns).fill(0);\r\n\r\n    const coordinates = contentHeight.map((itemHeight) => {\r\n        // Next photo goes into column with lowest total height\r\n        const yPosition = Math.min(...columnYPositions);\r\n        const columnIndex = columnYPositions.indexOf(yPosition);\r\n\r\n        // Update total height in columns\r\n        columnYPositions[columnIndex] += itemHeight + gutter;\r\n\r\n        return { x: (columnWidth + gutter) * columnIndex, y: yPosition };\r\n    });\r\n\r\n    // Max height required to set the content-container div height\r\n    const maxHeight = Math.max(...columnYPositions);\r\n\r\n    return { coordinates, maxHeight };\r\n};\r\n\r\n/**\r\n * Gets the loading behavior of the given image. \"Eager\" load images at the top of the gallery for better \r\n * user experience and to reduce 'Largest Contentful Paint.'\r\n * @param {int} containerWidth - Size of the gallery container.\r\n * @param {int} i - Image index in the gallery.\r\n * @returns string \"eager\" or \"lazy\" for Gatsby image loading.\r\n */\r\nconst getImageLoadBehavior = (containerWidth, i) => {\r\n    let shouldEagerLoad = false;\r\n    // if (containerWidth < mobileBreakpoint) {\r\n    //     shouldEagerLoad = (i < 3);\r\n    // }\r\n    // else if (containerWidth < desktopBreakpoint) {\r\n    //     shouldEagerLoad = (i < 5);\r\n    // }\r\n    // else {\r\n    //     shouldEagerLoad = (i < 9);\r\n    // }\r\n\r\n    // Eager load the first 6 images to reduce use of useResizeObserver\r\n    shouldEagerLoad = i < 6 ? true : false;\r\n\r\n    return shouldEagerLoad ? \"eager\" : \"lazy\";\r\n}\r\n\r\nexport { getAspectRatio, getBreakPoint, getContentHeight, getContentWidth, getLayoutPosition, getImageLoadBehavior };","import React, { useMemo } from 'react';\r\nimport { GatsbyImage, getImage } from 'gatsby-plugin-image';\r\nimport PropTypes from 'prop-types';\r\nimport SimpleReactLightbox, { SRLWrapper } from 'simple-react-lightbox';\r\nimport useResizeObserver from 'use-resize-observer';\r\n\r\nimport { getBreakPoint, getContentHeight, getContentWidth, getLayoutPosition, getImageLoadBehavior } from '../utils/masonry';\r\nimport { darkGrey, offWhite } from '../styles/export.module.scss';\r\nimport '../styles/components/gallery.scss';\r\n\r\n/**\r\n * NOTE: When the lightbox is activated, simple-react-lightbox (v3.6.6) hides the scroll bar and adds\r\n * adds 17 px margin-right to the body. It is incorrectly implemented on browsers that have the scrollbar \r\n * shown by default as the \"fix\" only works on the first time the lightbox is opened. See issue:\r\n * https://github.com/michelecocuccio/simple-react-lightbox/issues/113.\r\n * \r\n * To fix this page shift issue, apply 'margin = 0 !important' and 'overflow-y: scroll' in _base.scss.\r\n*/\r\nconst Gallery = ({ images, columns }) => {\r\n    const { ref: containerRef, width: containerWidth } = useResizeObserver();\r\n\r\n    const defaultColumns = !!columns ? columns : 3;\r\n    const defaultGutter = 20;\r\n\r\n    const { contentWidth, contentHeight, coordinates, maxHeight } = useMemo(() => {\r\n        if (!containerWidth) {\r\n            return { contentWidth: null, contentHeight: null, coordinates: null, maxHeight: 0 };\r\n        };\r\n\r\n        const numColumns = getBreakPoint(containerWidth, defaultColumns);\r\n        const { contentWidth, gutter } = getContentWidth(containerWidth, numColumns, defaultGutter);\r\n        const contentHeight = getContentHeight(images, contentWidth);\r\n        const { coordinates, maxHeight } = getLayoutPosition(contentHeight, contentWidth, gutter, numColumns);\r\n\r\n        return { contentWidth, contentHeight, coordinates, maxHeight };\r\n    }, [images, containerWidth, defaultColumns]);\r\n\r\n    // Currently does not correctly render images with max-width < containerWidth.\r\n    return (\r\n        <SimpleReactLightbox>\r\n            <SRLWrapper options={LIGHTBOX_OPTIONS}>\r\n                <div ref={containerRef}>\r\n                    <div className=\"gallery-wrapper\" style={{ height: maxHeight }}>\r\n                        {contentWidth && images.map(({ alt, image }, i) => {\r\n                            return (\r\n                                <div\r\n                                    key={image.id}\r\n                                    style={{\r\n                                        cursor: \"pointer\",\r\n                                        position: 'absolute',\r\n                                        top: coordinates[i].y,\r\n                                        left: coordinates[i].x,\r\n                                        width: contentWidth,\r\n                                        height: contentHeight[i]\r\n                                    }}\r\n                                >\r\n                                    <GatsbyImage \r\n                                        image={getImage(image)}\r\n                                        alt={alt}\r\n                                        loading={getImageLoadBehavior(containerWidth, i)}\r\n                                    />\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </SRLWrapper>\r\n        </SimpleReactLightbox>\r\n    );\r\n};\r\n\r\nexport default Gallery;\r\n\r\nGallery.propTypes = {\r\n    images: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            alt: PropTypes.string.isRequired,\r\n            image: PropTypes.shape({\r\n                id: PropTypes.string.isRequired,\r\n                childImageSharp: PropTypes.shape({\r\n                    gatsbyImageData: PropTypes.shape({\r\n                        height: PropTypes.number,\r\n                        images: PropTypes.object,\r\n                        layout: PropTypes.string,\r\n                        width: PropTypes.number,\r\n                    }).isRequired,\r\n                }).isRequired,\r\n            }).isRequired,\r\n        })\r\n    ).isRequired,\r\n    columns: PropTypes.number,\r\n};\r\n\r\n// simple-react-lightbox settings\r\nconst LIGHTBOX_OPTIONS = {\r\n    settings: {\r\n        disablePanzoom: true,\r\n        hideControlsAfter: 2000,\r\n        lightboxTransitionSpeed: 0.6,\r\n        overlayColor: offWhite,\r\n        slideTransitionSpeed: 0.6,\r\n        slideTransitionTimingFunction: \"easeIn\",\r\n    },\r\n    buttons: {\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        iconColor: darkGrey,\r\n        showAutoplayButton: false,\r\n        showDownloadButton: false,\r\n        showFullscreenButton: false,\r\n    },\r\n    caption: {\r\n        showCaption: false,\r\n    },\r\n    progressBar: {\r\n        showProgressBar: false,\r\n    },\r\n    thumbnails: {\r\n        showThumbnails: false,\r\n    },\r\n};","// extracted by mini-css-extract-plugin\nexport var darkGrey = \"#121212\";\nexport var desktopBreakpoint = \"960\";\nexport var mobileBreakpoint = \"640\";\nexport var offWhite = \"rgba(255,255,255,.95)\";"],"names":["Button","_ref","buttonText","path","React","Link","to","className","BackToTopButton","onClick","scrollUp","window","scrollTo","top","behavior","GalleryButtons","_ref2","renderButton","type","wrapperClassName","title","subtitle","description","subAlbum","dangerouslySetInnerHTML","__html","length","map","album","idx","slug","activeClassName","key","reactPropsRegex","fn","cache","arg","undefined","prop","test","charCodeAt","getMetaImage","images","firstHorizontalImage","find","image","height","width","childImageSharp","original","extractSize","entry","boxProp","sizeType","contentRect","useResizeObserver","opts","onResize","onResizeRef","useRef","current","round","Math","resizeObserverRef","_useState","useState","size","setSize","didUnmount","useEffect","previous","refCallback","subscriber","refOrElement","lastReportRef","refOrElementRef","cbElementRef","evaluateSubscription","useCallback","cbElement","element","Element","cleanup","useResolvedElement","box","instance","ResizeObserver","entries","reportedWidth","reportedHeight","newWidth","newHeight","newSize","observe","unobserve","ref","useMemo","getContentHeight","contentWidth","aspectRatios","getImage","ceil","getAspectRatio","aspectRatio","floor","getImageLoadBehavior","containerWidth","i","shouldEagerLoad","columns","containerRef","defaultColumns","contentHeight","coordinates","maxHeight","numColumns","getBreakPoint","gutter","getContentWidth","defaultGutter","numerator","getLayoutPosition","columnWidth","columnYPositions","Array","fill","itemHeight","yPosition","min","apply","_toConsumableArray","columnIndex","indexOf","x","y","max","SimpleReactLightbox","SRLWrapper","options","LIGHTBOX_OPTIONS","style","alt","id","cursor","position","left","GatsbyImage","loading","settings","disablePanzoom","hideControlsAfter","lightboxTransitionSpeed","overlayColor","slideTransitionSpeed","slideTransitionTimingFunction","buttons","backgroundColor","iconColor","showAutoplayButton","showDownloadButton","showFullscreenButton","caption","showCaption","progressBar","showProgressBar","thumbnails","showThumbnails"],"sourceRoot":""}