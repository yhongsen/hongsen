{"version":3,"sources":["webpack://hongsen/./src/components/Button.js","webpack://hongsen/./src/components/Header.js","webpack://hongsen/./src/templates/design-template.js","webpack://hongsen/./src/utils/utils.js"],"names":["buttonText","path","Link","to","className","title","subtitle","description","dangerouslySetInnerHTML","__html","data","page","pageContext","markdownRemark","images","frontmatter","photos","childrenYaml","metaImage","getMetaImage","excerpt","image","html","columns","firstHorizontalImage","find","childImageSharp","original","height","width"],"mappings":"+HAqBA,IAfe,SAAC,GAA0B,IAAxBA,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,KAC1B,OACI,gBAAC,EAAAC,KAAD,CAAMC,GAAIF,EAAMG,UAAU,eACtB,uBAAKA,UAAU,UACVJ,M,gDCWjB,IAhBe,SAAC,GAAD,IAAGK,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAUC,EAApB,EAAoBA,YAApB,OACX,uBAAKH,UAAU,kBACX,0BAAQA,UAAU,gBACd,0BAAKC,GACL,sBAAID,UAAU,mBAAmBE,IAErC,uBAAKF,UAAU,qBAAqBI,wBAAyB,CAAEC,OAAQF,Q,mHCqC/E,UAtCuB,SAAC,GAA2B,IAAzBG,EAAwB,EAAxBA,KAChBC,GADwC,EAAlBC,YACfF,EAAKG,gBACZC,EAASH,EAAKI,YAAYC,OAASL,EAAKI,YAAYC,OAAOC,aAAe,GAC1EC,GAAYC,OAAaL,GAHe,mBAIbH,EAAKI,aAA9BV,EAJsC,EAItCA,MAAOC,EAJ+B,EAI/BA,SAIf,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAKD,MAAOA,EAAOE,YAAaI,EAAKS,QAASC,MAAOH,IACrD,gBAAC,IAAD,CAAQb,MAAOA,EAAOC,SAAUA,EAAUC,YAAaI,EAAKW,OAC5D,gBAAC,IAAD,CAASR,OAAQA,EAAQS,QAPd,IAQX,gBAAC,IAAD,CAAQvB,WAAY,qBAAsBC,KAAM,e,kECd5D,IAAMkB,EAAe,SAACL,GAClB,IAAMU,EAAuBV,EAAOW,MAAK,YAAgB,IAAD,IAAZJ,MACRK,gBAAgBC,SAAxCC,EAD4C,EAC5CA,OACR,OAFoD,EACpCC,MACDD,KAEnB,OACIJ,GAAwBA,EAAqBH,MAAMK,gBAAgBC","file":"component---src-templates-design-template-js-32a3d81a37377b6b4f99.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport '../styles/components/button.scss';\r\n\r\nconst Button = ({ buttonText, path }) => {\r\n    return (\r\n        <Link to={path} className=\"button-link\">\r\n            <div className=\"button\">\r\n                {buttonText}\r\n            </div>\r\n        </Link>\r\n    )\r\n};\r\n\r\nButton.propTypes = {\r\n    buttonText: PropTypes.string,\r\n    path: PropTypes.string,\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport '../styles/components/header.scss';\r\n\r\nconst Header = ({ title, subtitle, description }) => (\r\n    <div className=\"header-wrapper\">\r\n        <header className=\"header-title\">\r\n            <h1>{title}</h1>\r\n            <h3 className=\"header-subtitle\">{subtitle}</h3>\r\n        </header>\r\n        <div className=\"header-description\" dangerouslySetInnerHTML={{ __html: description }} />\r\n    </div>\r\n);\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    subtitle: PropTypes.string.isRequired,\r\n    description: PropTypes.string,\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport Header from '../components/Header';\r\nimport Container from '../components/Container';\r\nimport Gallery from '../components/Gallery';\r\nimport Button from '../components/Button';\r\nimport SEO from '../components/SEO';\r\nimport { getMetaImage } from '../utils/utils';\r\n\r\nconst DesignTemplate = ({ data, pageContext }) => {\r\n    const page = data.markdownRemark;\r\n    const images = page.frontmatter.photos ? page.frontmatter.photos.childrenYaml : [];\r\n    const metaImage = getMetaImage(images);\r\n    const { title, subtitle } = { ...page.frontmatter };\r\n    const numColumns = 1;\r\n    // const { previous, next } = pageContext;\r\n\r\n    return (\r\n        <Container>\r\n            <SEO title={title} description={page.excerpt} image={metaImage} />\r\n            <Header title={title} subtitle={subtitle} description={page.html} />\r\n            <Gallery images={images} columns={numColumns} />\r\n            <Button buttonText={\"Back to Collection\"} path={\"/design\"} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nDesignTemplate.propTypes = {\r\n    data: PropTypes.shape({\r\n        markdownRemark: PropTypes.shape({\r\n            html: PropTypes.string,\r\n            excerpt: PropTypes.string,\r\n            frontmatter: PropTypes.shape({\r\n                slug: PropTypes.string,\r\n                type: PropTypes.string,\r\n                title: PropTypes.string,\r\n                subtitle: PropTypes.string,\r\n                date: PropTypes.string,\r\n                photos: PropTypes.shape({\r\n                    childrenYaml: PropTypes.array,\r\n                }),\r\n            }),\r\n        }),\r\n    }).isRequired,\r\n    pageContext: PropTypes.object\r\n};\r\n\r\nexport default DesignTemplate;\r\n\r\nexport const pageQuery = graphql`\r\n        query DesignPageBySlug($slug: String!) {\r\n            markdownRemark(frontmatter: { slug: { eq: $slug } }) {\r\n                html\r\n                excerpt(pruneLength: 160)\r\n                frontmatter {\r\n                    slug\r\n                    type\r\n                    title\r\n                    subtitle\r\n                    date(formatString: \"MMMM YYYY\")\r\n                    photos {\r\n                        childrenYaml {\r\n                            ...GalleryImageFragment\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    `","/**\r\n * Get's the first image's image data in the list of images that is a horizontal image.\r\n * This image will be used for the metadata image tags when sharing on social media,\r\n * which generally displays in a horizontal format.\r\n *\r\n * @param {List[object]} images - list of objects that contain info about\r\n * each images' image src, height, and width. Used for metadata images\r\n * @returns object containing src, height, and width attributes\r\n */\r\nconst getMetaImage = (images) => {\r\n    const firstHorizontalImage = images.find(({ image }) => {\r\n        const { height, width } = image.childImageSharp.original\r\n        return width > height;\r\n    });\r\n    return (\r\n        firstHorizontalImage && firstHorizontalImage.image.childImageSharp.original\r\n    );\r\n};\r\n\r\nexport { getMetaImage };"],"sourceRoot":""}